using System.Collections;
using System.Globalization;
using Xunit.Abstractions;

namespace ClosedXML.Parser.Tests;

public class QuotationTests
{
    private readonly ITestOutputHelper _output;

    public QuotationTests(ITestOutputHelper output)
    {
        _output = output;
    }

    [Theory]
    [InlineData(" ", true)]
    [InlineData(".", true)]
    [InlineData("^", true)]
    [InlineData("!", true)]
    [InlineData("+", true)]
    [InlineData("0", true)]
    [InlineData("㏞", true)]
    [InlineData("😁", true)] // non BML
    [InlineData("A", false)]
    [InlineData("Z", false)]
    [InlineData("㝳", false)]
    [InlineData("㏝", false)]
    public void Sheet_name_with_letter_like_first_character_should_not_be_quoted(string sheetName, bool shouldBeQuoted)
    {
        Assert.Equal(shouldBeQuoted, Quotation.ShouldQuoteSheet(sheetName));
    }

    [Theory]
    [InlineData("A!", true)]
    [InlineData("A+A", true)]
    [InlineData("A😁", true)]  // non BML
    [InlineData("A0", false)]
    [InlineData("A.", false)]
    [InlineData("AZ", false)]
    public void Sheet_name_with_letter_number_or_symbol_like_non_first_character_should_not_be_quoted(string sheetName, bool shouldBeQuoted)
    {
        Assert.Equal(shouldBeQuoted, Quotation.ShouldQuoteSheet(sheetName));
    }

    [Theory(Skip = "Used to generate bitmask for the quotation.")]
    [InlineData(@"ident-sheet-first.txt")]
    [InlineData(@"ident-sheet-next.txt")]
    public void Generate_sheet_quotation_data(string path)
    {
        // Files were generated by AutoHotKey script that changed the name of a sheet and checked formula
        // referencing the sheet. There is no obvious pattern. Codepoints from Unicode 5.2+ are always quoted,
        // at least for BML. Other than that, MS folk creativity at work.
        // The invalid code points for sheet name are not in the file: * 2A,/ 2F,: 3A,? 3F,[ 5B,\ 5C,] 5D
        var codepointQuoted = new BitArray(0x10000);
        foreach (var line in File.ReadAllLines(path))
        {
            var codepoint = int.Parse(line[..4], NumberStyles.HexNumber);
            var isQuoted = line[5..] switch
            {
                "YES" => true,
                "NO" => false,
                _ => throw new NotSupportedException(line)
            };
            codepointQuoted[codepoint] = isQuoted;
        }

        var intArray = new int[65536 / 32];
        codepointQuoted.CopyTo(intArray, 0);
        _output.WriteLine(string.Join(", ", intArray.Select(x => "0x" + x.ToString("X8"))));
    }
}
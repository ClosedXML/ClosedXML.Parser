//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c://Users//havli//source//repos//ClosedXML.Parser//src//ClosedXML.ANTLR//FormulaParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


// ANTLR generated file is marked as a non-CLS compliant, but that is not necessary, because whole assembly is not CLS compliant.
#pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FormulaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		REF_CONSTANT=1, NONREF_ERRORS=2, LOGICAL_CONSTANT=3, NUMERICAL_CONSTANT=4, 
		STRING_CONSTANT=5, POW=6, MULT=7, DIV=8, PLUS=9, MINUS=10, CONCAT=11, 
		EQUAL=12, NOT_EQUAL=13, LESS_OR_EQUAL_THAN=14, LESS_THAN=15, GREATER_OR_EQUAL_THAN=16, 
		GREATER_THAN=17, PERCENT=18, SEMICOLON=19, COLON=20, OPEN_BRACE=21, CLOSE_BRACE=22, 
		OPEN_CURLY=23, CLOSE_CURLY=24, COMMA=25, SPACE=26, INTERSECT=27, SPILL=28, 
		BOOK_PREFIX=29, BANG_REFERENCE=30, SHEET_RANGE_PREFIX=31, SINGLE_SHEET_PREFIX=32, 
		A1_REFERENCE=33, REF_FUNCTION_LIST=34, CELL_FUNCTION_LIST=35, USER_DEFINED_FUNCTION_NAME=36, 
		NAME=37, INTRA_TABLE_REFERENCE=38;
	public const int
		RULE_formula = 0, RULE_expression = 1, RULE_concat_expression = 2, RULE_additive_expression = 3, 
		RULE_multiplying_expression = 4, RULE_pow_expression = 5, RULE_percent_expression = 6, 
		RULE_prefix_atom_expression = 7, RULE_atom_expression = 8, RULE_ref_expression = 9, 
		RULE_ref_implicit_expression = 10, RULE_ref_intersection_expression = 11, 
		RULE_ref_range_expression = 12, RULE_ref_spill_expression = 13, RULE_ref_atom_expression = 14, 
		RULE_constant = 15, RULE_constant_list_rows = 16, RULE_constant_list_row = 17, 
		RULE_cell_reference = 18, RULE_argument_list = 19, RULE_arg_expression = 20, 
		RULE_arg_concat_expression = 21, RULE_arg_additive_expression = 22, RULE_arg_multiplying_expression = 23, 
		RULE_arg_pow_expression = 24, RULE_arg_percent_expression = 25, RULE_arg_prefix_atom_expression = 26, 
		RULE_arg_atom_expression = 27, RULE_name_reference = 28, RULE_structure_reference = 29, 
		RULE_table_identifier = 30, RULE_table_name = 31, RULE_ref_function_call = 32, 
		RULE_function_call = 33;
	public static readonly string[] ruleNames = {
		"formula", "expression", "concat_expression", "additive_expression", "multiplying_expression", 
		"pow_expression", "percent_expression", "prefix_atom_expression", "atom_expression", 
		"ref_expression", "ref_implicit_expression", "ref_intersection_expression", 
		"ref_range_expression", "ref_spill_expression", "ref_atom_expression", 
		"constant", "constant_list_rows", "constant_list_row", "cell_reference", 
		"argument_list", "arg_expression", "arg_concat_expression", "arg_additive_expression", 
		"arg_multiplying_expression", "arg_pow_expression", "arg_percent_expression", 
		"arg_prefix_atom_expression", "arg_atom_expression", "name_reference", 
		"structure_reference", "table_identifier", "table_name", "ref_function_call", 
		"function_call"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "REF_CONSTANT", "NONREF_ERRORS", "LOGICAL_CONSTANT", "NUMERICAL_CONSTANT", 
		"STRING_CONSTANT", "POW", "MULT", "DIV", "PLUS", "MINUS", "CONCAT", "EQUAL", 
		"NOT_EQUAL", "LESS_OR_EQUAL_THAN", "LESS_THAN", "GREATER_OR_EQUAL_THAN", 
		"GREATER_THAN", "PERCENT", "SEMICOLON", "COLON", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_CURLY", "CLOSE_CURLY", "COMMA", "SPACE", "INTERSECT", "SPILL", "BOOK_PREFIX", 
		"BANG_REFERENCE", "SHEET_RANGE_PREFIX", "SINGLE_SHEET_PREFIX", "A1_REFERENCE", 
		"REF_FUNCTION_LIST", "CELL_FUNCTION_LIST", "USER_DEFINED_FUNCTION_NAME", 
		"NAME", "INTRA_TABLE_REFERENCE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FormulaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FormulaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FormulaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FormulaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FormulaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FormulaParser.Eof, 0); }
		public FormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula; } }
	}

	[RuleVersion(0)]
	public FormulaContext formula() {
		FormulaContext _localctx = new FormulaContext(Context, State);
		EnterRule(_localctx, 0, RULE_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			expression();
			State = 69;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Concat_expressionContext[] concat_expression() {
			return GetRuleContexts<Concat_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concat_expressionContext concat_expression(int i) {
			return GetRuleContext<Concat_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_OR_EQUAL_THAN() { return GetTokens(FormulaParser.GREATER_OR_EQUAL_THAN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUAL_THAN(int i) {
			return GetToken(FormulaParser.GREATER_OR_EQUAL_THAN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_OR_EQUAL_THAN() { return GetTokens(FormulaParser.LESS_OR_EQUAL_THAN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUAL_THAN(int i) {
			return GetToken(FormulaParser.LESS_OR_EQUAL_THAN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_THAN() { return GetTokens(FormulaParser.LESS_THAN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN(int i) {
			return GetToken(FormulaParser.LESS_THAN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_THAN() { return GetTokens(FormulaParser.GREATER_THAN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN(int i) {
			return GetToken(FormulaParser.GREATER_THAN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_EQUAL() { return GetTokens(FormulaParser.NOT_EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL(int i) {
			return GetToken(FormulaParser.NOT_EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(FormulaParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(FormulaParser.EQUAL, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			concat_expression();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 258048L) != 0)) {
				{
				{
				State = 72;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 258048L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 73;
				concat_expression();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concat_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONCAT() { return GetTokens(FormulaParser.CONCAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT(int i) {
			return GetToken(FormulaParser.CONCAT, i);
		}
		public Concat_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concat_expression; } }
	}

	[RuleVersion(0)]
	public Concat_expressionContext concat_expression() {
		Concat_expressionContext _localctx = new Concat_expressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_concat_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			additive_expression();
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CONCAT) {
				{
				{
				State = 80;
				Match(CONCAT);
				State = 81;
				additive_expression();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplying_expressionContext[] multiplying_expression() {
			return GetRuleContexts<Multiplying_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplying_expressionContext multiplying_expression(int i) {
			return GetRuleContext<Multiplying_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(FormulaParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(FormulaParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(FormulaParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(FormulaParser.MINUS, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_additive_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			multiplying_expression();
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 88;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 89;
				multiplying_expression();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplying_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pow_expressionContext[] pow_expression() {
			return GetRuleContexts<Pow_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pow_expressionContext pow_expression(int i) {
			return GetRuleContext<Pow_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(FormulaParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(FormulaParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(FormulaParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(FormulaParser.DIV, i);
		}
		public Multiplying_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplying_expression; } }
	}

	[RuleVersion(0)]
	public Multiplying_expressionContext multiplying_expression() {
		Multiplying_expressionContext _localctx = new Multiplying_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_multiplying_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			pow_expression();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULT || _la==DIV) {
				{
				{
				State = 96;
				_la = TokenStream.LA(1);
				if ( !(_la==MULT || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 97;
				pow_expression();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pow_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Percent_expressionContext[] percent_expression() {
			return GetRuleContexts<Percent_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Percent_expressionContext percent_expression(int i) {
			return GetRuleContext<Percent_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POW() { return GetTokens(FormulaParser.POW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW(int i) {
			return GetToken(FormulaParser.POW, i);
		}
		public Pow_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pow_expression; } }
	}

	[RuleVersion(0)]
	public Pow_expressionContext pow_expression() {
		Pow_expressionContext _localctx = new Pow_expressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_pow_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			percent_expression();
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POW) {
				{
				{
				State = 104;
				Match(POW);
				State = 105;
				percent_expression();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Percent_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_atom_expressionContext prefix_atom_expression() {
			return GetRuleContext<Prefix_atom_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(FormulaParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(FormulaParser.PERCENT, i);
		}
		public Percent_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_percent_expression; } }
	}

	[RuleVersion(0)]
	public Percent_expressionContext percent_expression() {
		Percent_expressionContext _localctx = new Percent_expressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_percent_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			prefix_atom_expression();
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERCENT) {
				{
				{
				State = 112;
				Match(PERCENT);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_atom_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_atom_expressionContext prefix_atom_expression() {
			return GetRuleContext<Prefix_atom_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FormulaParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FormulaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Atom_expressionContext atom_expression() {
			return GetRuleContext<Atom_expressionContext>(0);
		}
		public Prefix_atom_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_atom_expression; } }
	}

	[RuleVersion(0)]
	public Prefix_atom_expressionContext prefix_atom_expression() {
		Prefix_atom_expressionContext _localctx = new Prefix_atom_expressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_prefix_atom_expression);
		int _la;
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 119;
				prefix_atom_expression();
				}
				break;
			case REF_CONSTANT:
			case NONREF_ERRORS:
			case LOGICAL_CONSTANT:
			case NUMERICAL_CONSTANT:
			case STRING_CONSTANT:
			case OPEN_BRACE:
			case OPEN_CURLY:
			case INTERSECT:
			case BOOK_PREFIX:
			case BANG_REFERENCE:
			case SHEET_RANGE_PREFIX:
			case SINGLE_SHEET_PREFIX:
			case A1_REFERENCE:
			case REF_FUNCTION_LIST:
			case CELL_FUNCTION_LIST:
			case USER_DEFINED_FUNCTION_NAME:
			case NAME:
			case INTRA_TABLE_REFERENCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				atom_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Atom_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FormulaParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FormulaParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_expressionContext ref_expression() {
			return GetRuleContext<Ref_expressionContext>(0);
		}
		public Atom_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_expression; } }
	}

	[RuleVersion(0)]
	public Atom_expressionContext atom_expression() {
		Atom_expressionContext _localctx = new Atom_expressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_atom_expression);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				Match(OPEN_BRACE);
				State = 125;
				expression();
				State = 126;
				Match(CLOSE_BRACE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128;
				function_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 129;
				ref_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_implicit_expressionContext[] ref_implicit_expression() {
			return GetRuleContexts<Ref_implicit_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_implicit_expressionContext ref_implicit_expression(int i) {
			return GetRuleContext<Ref_implicit_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FormulaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FormulaParser.COMMA, i);
		}
		public Ref_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_expression; } }
	}

	[RuleVersion(0)]
	public Ref_expressionContext ref_expression() {
		Ref_expressionContext _localctx = new Ref_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_ref_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ref_implicit_expression();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 133;
				Match(COMMA);
				State = 134;
				ref_implicit_expression();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_implicit_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(FormulaParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ref_implicit_expressionContext ref_implicit_expression() {
			return GetRuleContext<Ref_implicit_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_intersection_expressionContext ref_intersection_expression() {
			return GetRuleContext<Ref_intersection_expressionContext>(0);
		}
		public Ref_implicit_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_implicit_expression; } }
	}

	[RuleVersion(0)]
	public Ref_implicit_expressionContext ref_implicit_expression() {
		Ref_implicit_expressionContext _localctx = new Ref_implicit_expressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_ref_implicit_expression);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERSECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				Match(INTERSECT);
				State = 141;
				ref_implicit_expression();
				}
				break;
			case REF_CONSTANT:
			case OPEN_BRACE:
			case BOOK_PREFIX:
			case BANG_REFERENCE:
			case SHEET_RANGE_PREFIX:
			case SINGLE_SHEET_PREFIX:
			case A1_REFERENCE:
			case REF_FUNCTION_LIST:
			case NAME:
			case INTRA_TABLE_REFERENCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				ref_intersection_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_intersection_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_range_expressionContext[] ref_range_expression() {
			return GetRuleContexts<Ref_range_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_range_expressionContext ref_range_expression(int i) {
			return GetRuleContext<Ref_range_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(FormulaParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(FormulaParser.SPACE, i);
		}
		public Ref_intersection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_intersection_expression; } }
	}

	[RuleVersion(0)]
	public Ref_intersection_expressionContext ref_intersection_expression() {
		Ref_intersection_expressionContext _localctx = new Ref_intersection_expressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_ref_intersection_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ref_range_expression();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 146;
				Match(SPACE);
				State = 147;
				ref_range_expression();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_range_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_spill_expressionContext[] ref_spill_expression() {
			return GetRuleContexts<Ref_spill_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_spill_expressionContext ref_spill_expression(int i) {
			return GetRuleContext<Ref_spill_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FormulaParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FormulaParser.COLON, i);
		}
		public Ref_range_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_range_expression; } }
	}

	[RuleVersion(0)]
	public Ref_range_expressionContext ref_range_expression() {
		Ref_range_expressionContext _localctx = new Ref_range_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_ref_range_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ref_spill_expression();
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 154;
				Match(COLON);
				State = 155;
				ref_spill_expression();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_spill_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ref_atom_expressionContext ref_atom_expression() {
			return GetRuleContext<Ref_atom_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPILL() { return GetToken(FormulaParser.SPILL, 0); }
		public Ref_spill_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_spill_expression; } }
	}

	[RuleVersion(0)]
	public Ref_spill_expressionContext ref_spill_expression() {
		Ref_spill_expressionContext _localctx = new Ref_spill_expressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_ref_spill_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ref_atom_expression();
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPILL) {
				{
				State = 162;
				Match(SPILL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_atom_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF_CONSTANT() { return GetToken(FormulaParser.REF_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FormulaParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ref_expressionContext ref_expression() {
			return GetRuleContext<Ref_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FormulaParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cell_referenceContext cell_reference() {
			return GetRuleContext<Cell_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_function_callContext ref_function_call() {
			return GetRuleContext<Ref_function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_referenceContext name_reference() {
			return GetRuleContext<Name_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structure_referenceContext structure_reference() {
			return GetRuleContext<Structure_referenceContext>(0);
		}
		public Ref_atom_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_atom_expression; } }
	}

	[RuleVersion(0)]
	public Ref_atom_expressionContext ref_atom_expression() {
		Ref_atom_expressionContext _localctx = new Ref_atom_expressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_ref_atom_expression);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				Match(REF_CONSTANT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				Match(OPEN_BRACE);
				State = 167;
				ref_expression();
				State = 168;
				Match(CLOSE_BRACE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				cell_reference();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 171;
				ref_function_call();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 172;
				name_reference();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 173;
				structure_reference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONREF_ERRORS() { return GetToken(FormulaParser.NONREF_ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_CONSTANT() { return GetToken(FormulaParser.LOGICAL_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERICAL_CONSTANT() { return GetToken(FormulaParser.NUMERICAL_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CONSTANT() { return GetToken(FormulaParser.STRING_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY() { return GetToken(FormulaParser.OPEN_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_list_rowsContext constant_list_rows() {
			return GetRuleContext<Constant_list_rowsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY() { return GetToken(FormulaParser.CLOSE_CURLY, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 30, RULE_constant);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NONREF_ERRORS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				Match(NONREF_ERRORS);
				}
				break;
			case LOGICAL_CONSTANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				Match(LOGICAL_CONSTANT);
				}
				break;
			case NUMERICAL_CONSTANT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178;
				Match(NUMERICAL_CONSTANT);
				}
				break;
			case STRING_CONSTANT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 179;
				Match(STRING_CONSTANT);
				}
				break;
			case OPEN_CURLY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 180;
				Match(OPEN_CURLY);
				State = 181;
				constant_list_rows();
				State = 182;
				Match(CLOSE_CURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_list_rowsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_list_rowContext[] constant_list_row() {
			return GetRuleContexts<Constant_list_rowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_list_rowContext constant_list_row(int i) {
			return GetRuleContext<Constant_list_rowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(FormulaParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(FormulaParser.SEMICOLON, i);
		}
		public Constant_list_rowsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_list_rows; } }
	}

	[RuleVersion(0)]
	public Constant_list_rowsContext constant_list_rows() {
		Constant_list_rowsContext _localctx = new Constant_list_rowsContext(Context, State);
		EnterRule(_localctx, 32, RULE_constant_list_rows);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			constant_list_row();
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 187;
				Match(SEMICOLON);
				State = 188;
				constant_list_row();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_list_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REF_CONSTANT() { return GetTokens(FormulaParser.REF_CONSTANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF_CONSTANT(int i) {
			return GetToken(FormulaParser.REF_CONSTANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FormulaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FormulaParser.COMMA, i);
		}
		public Constant_list_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_list_row; } }
	}

	[RuleVersion(0)]
	public Constant_list_rowContext constant_list_row() {
		Constant_list_rowContext _localctx = new Constant_list_rowContext(Context, State);
		EnterRule(_localctx, 34, RULE_constant_list_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NONREF_ERRORS:
			case LOGICAL_CONSTANT:
			case NUMERICAL_CONSTANT:
			case STRING_CONSTANT:
			case OPEN_CURLY:
				{
				State = 194;
				constant();
				}
				break;
			case REF_CONSTANT:
				{
				State = 195;
				Match(REF_CONSTANT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 198;
				Match(COMMA);
				State = 201;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NONREF_ERRORS:
				case LOGICAL_CONSTANT:
				case NUMERICAL_CONSTANT:
				case STRING_CONSTANT:
				case OPEN_CURLY:
					{
					State = 199;
					constant();
					}
					break;
				case REF_CONSTANT:
					{
					State = 200;
					Match(REF_CONSTANT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A1_REFERENCE() { return GetToken(FormulaParser.A1_REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG_REFERENCE() { return GetToken(FormulaParser.BANG_REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHEET_RANGE_PREFIX() { return GetToken(FormulaParser.SHEET_RANGE_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_SHEET_PREFIX() { return GetToken(FormulaParser.SINGLE_SHEET_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF_CONSTANT() { return GetToken(FormulaParser.REF_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FormulaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FormulaParser.COLON, 0); }
		public Cell_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_reference; } }
	}

	[RuleVersion(0)]
	public Cell_referenceContext cell_reference() {
		Cell_referenceContext _localctx = new Cell_referenceContext(Context, State);
		EnterRule(_localctx, 36, RULE_cell_reference);
		int _la;
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case A1_REFERENCE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				Match(A1_REFERENCE);
				}
				break;
			case BANG_REFERENCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				Match(BANG_REFERENCE);
				}
				break;
			case SHEET_RANGE_PREFIX:
				EnterOuterAlt(_localctx, 3);
				{
				State = 210;
				Match(SHEET_RANGE_PREFIX);
				State = 211;
				Match(A1_REFERENCE);
				}
				break;
			case SINGLE_SHEET_PREFIX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 212;
				Match(SINGLE_SHEET_PREFIX);
				State = 213;
				_la = TokenStream.LA(1);
				if ( !(_la==REF_CONSTANT || _la==A1_REFERENCE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 214;
				Match(NAME);
				State = 215;
				Match(COLON);
				State = 216;
				Match(SINGLE_SHEET_PREFIX);
				State = 217;
				Match(A1_REFERENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FormulaParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_expressionContext[] arg_expression() {
			return GetRuleContexts<Arg_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_expressionContext arg_expression(int i) {
			return GetRuleContext<Arg_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FormulaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FormulaParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549363648062L) != 0)) {
				{
				State = 220;
				arg_expression();
				}
			}

			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 223;
				Match(COMMA);
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 549363648062L) != 0)) {
					{
					State = 224;
					arg_expression();
					}
				}

				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 232;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_concat_expressionContext[] arg_concat_expression() {
			return GetRuleContexts<Arg_concat_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_concat_expressionContext arg_concat_expression(int i) {
			return GetRuleContext<Arg_concat_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_OR_EQUAL_THAN() { return GetTokens(FormulaParser.GREATER_OR_EQUAL_THAN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUAL_THAN(int i) {
			return GetToken(FormulaParser.GREATER_OR_EQUAL_THAN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_OR_EQUAL_THAN() { return GetTokens(FormulaParser.LESS_OR_EQUAL_THAN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUAL_THAN(int i) {
			return GetToken(FormulaParser.LESS_OR_EQUAL_THAN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_THAN() { return GetTokens(FormulaParser.LESS_THAN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN(int i) {
			return GetToken(FormulaParser.LESS_THAN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_THAN() { return GetTokens(FormulaParser.GREATER_THAN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN(int i) {
			return GetToken(FormulaParser.GREATER_THAN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_EQUAL() { return GetTokens(FormulaParser.NOT_EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL(int i) {
			return GetToken(FormulaParser.NOT_EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(FormulaParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(FormulaParser.EQUAL, i);
		}
		public Arg_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_expression; } }
	}

	[RuleVersion(0)]
	public Arg_expressionContext arg_expression() {
		Arg_expressionContext _localctx = new Arg_expressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_arg_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			arg_concat_expression();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 258048L) != 0)) {
				{
				{
				State = 235;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 258048L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 236;
				arg_concat_expression();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_concat_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_additive_expressionContext[] arg_additive_expression() {
			return GetRuleContexts<Arg_additive_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_additive_expressionContext arg_additive_expression(int i) {
			return GetRuleContext<Arg_additive_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONCAT() { return GetTokens(FormulaParser.CONCAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT(int i) {
			return GetToken(FormulaParser.CONCAT, i);
		}
		public Arg_concat_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_concat_expression; } }
	}

	[RuleVersion(0)]
	public Arg_concat_expressionContext arg_concat_expression() {
		Arg_concat_expressionContext _localctx = new Arg_concat_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_arg_concat_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			arg_additive_expression();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CONCAT) {
				{
				{
				State = 243;
				Match(CONCAT);
				State = 244;
				arg_additive_expression();
				}
				}
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_additive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_multiplying_expressionContext[] arg_multiplying_expression() {
			return GetRuleContexts<Arg_multiplying_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_multiplying_expressionContext arg_multiplying_expression(int i) {
			return GetRuleContext<Arg_multiplying_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(FormulaParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(FormulaParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(FormulaParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(FormulaParser.MINUS, i);
		}
		public Arg_additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_additive_expression; } }
	}

	[RuleVersion(0)]
	public Arg_additive_expressionContext arg_additive_expression() {
		Arg_additive_expressionContext _localctx = new Arg_additive_expressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_arg_additive_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			arg_multiplying_expression();
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 251;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 252;
				arg_multiplying_expression();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_multiplying_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_pow_expressionContext[] arg_pow_expression() {
			return GetRuleContexts<Arg_pow_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_pow_expressionContext arg_pow_expression(int i) {
			return GetRuleContext<Arg_pow_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(FormulaParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(FormulaParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(FormulaParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(FormulaParser.DIV, i);
		}
		public Arg_multiplying_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_multiplying_expression; } }
	}

	[RuleVersion(0)]
	public Arg_multiplying_expressionContext arg_multiplying_expression() {
		Arg_multiplying_expressionContext _localctx = new Arg_multiplying_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_arg_multiplying_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			arg_pow_expression();
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULT || _la==DIV) {
				{
				{
				State = 259;
				_la = TokenStream.LA(1);
				if ( !(_la==MULT || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 260;
				arg_pow_expression();
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_pow_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_percent_expressionContext[] arg_percent_expression() {
			return GetRuleContexts<Arg_percent_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arg_percent_expressionContext arg_percent_expression(int i) {
			return GetRuleContext<Arg_percent_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POW() { return GetTokens(FormulaParser.POW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW(int i) {
			return GetToken(FormulaParser.POW, i);
		}
		public Arg_pow_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_pow_expression; } }
	}

	[RuleVersion(0)]
	public Arg_pow_expressionContext arg_pow_expression() {
		Arg_pow_expressionContext _localctx = new Arg_pow_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_arg_pow_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			arg_percent_expression();
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POW) {
				{
				{
				State = 267;
				Match(POW);
				State = 268;
				arg_percent_expression();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_percent_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_prefix_atom_expressionContext arg_prefix_atom_expression() {
			return GetRuleContext<Arg_prefix_atom_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(FormulaParser.PERCENT, 0); }
		public Arg_percent_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_percent_expression; } }
	}

	[RuleVersion(0)]
	public Arg_percent_expressionContext arg_percent_expression() {
		Arg_percent_expressionContext _localctx = new Arg_percent_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_arg_percent_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			arg_prefix_atom_expression();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERCENT) {
				{
				State = 275;
				Match(PERCENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_prefix_atom_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_prefix_atom_expressionContext arg_prefix_atom_expression() {
			return GetRuleContext<Arg_prefix_atom_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FormulaParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FormulaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_atom_expressionContext arg_atom_expression() {
			return GetRuleContext<Arg_atom_expressionContext>(0);
		}
		public Arg_prefix_atom_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_prefix_atom_expression; } }
	}

	[RuleVersion(0)]
	public Arg_prefix_atom_expressionContext arg_prefix_atom_expression() {
		Arg_prefix_atom_expressionContext _localctx = new Arg_prefix_atom_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_arg_prefix_atom_expression);
		int _la;
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 279;
				arg_prefix_atom_expression();
				}
				break;
			case REF_CONSTANT:
			case NONREF_ERRORS:
			case LOGICAL_CONSTANT:
			case NUMERICAL_CONSTANT:
			case STRING_CONSTANT:
			case OPEN_BRACE:
			case OPEN_CURLY:
			case INTERSECT:
			case BOOK_PREFIX:
			case BANG_REFERENCE:
			case SHEET_RANGE_PREFIX:
			case SINGLE_SHEET_PREFIX:
			case A1_REFERENCE:
			case REF_FUNCTION_LIST:
			case CELL_FUNCTION_LIST:
			case USER_DEFINED_FUNCTION_NAME:
			case NAME:
			case INTRA_TABLE_REFERENCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280;
				arg_atom_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_atom_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(FormulaParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(FormulaParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ref_implicit_expressionContext ref_implicit_expression() {
			return GetRuleContext<Ref_implicit_expressionContext>(0);
		}
		public Arg_atom_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_atom_expression; } }
	}

	[RuleVersion(0)]
	public Arg_atom_expressionContext arg_atom_expression() {
		Arg_atom_expressionContext _localctx = new Arg_atom_expressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_arg_atom_expression);
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 284;
				Match(OPEN_BRACE);
				State = 285;
				expression();
				State = 286;
				Match(CLOSE_BRACE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 288;
				function_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 289;
				ref_implicit_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FormulaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_SHEET_PREFIX() { return GetToken(FormulaParser.SINGLE_SHEET_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOK_PREFIX() { return GetToken(FormulaParser.BOOK_PREFIX, 0); }
		public Name_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_reference; } }
	}

	[RuleVersion(0)]
	public Name_referenceContext name_reference() {
		Name_referenceContext _localctx = new Name_referenceContext(Context, State);
		EnterRule(_localctx, 56, RULE_name_reference);
		int _la;
		try {
			State = 295;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				Match(NAME);
				}
				break;
			case BOOK_PREFIX:
			case SINGLE_SHEET_PREFIX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				_la = TokenStream.LA(1);
				if ( !(_la==BOOK_PREFIX || _la==SINGLE_SHEET_PREFIX) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 294;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRA_TABLE_REFERENCE() { return GetToken(FormulaParser.INTRA_TABLE_REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_identifierContext table_identifier() {
			return GetRuleContext<Table_identifierContext>(0);
		}
		public Structure_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_reference; } }
	}

	[RuleVersion(0)]
	public Structure_referenceContext structure_reference() {
		Structure_referenceContext _localctx = new Structure_referenceContext(Context, State);
		EnterRule(_localctx, 58, RULE_structure_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BOOK_PREFIX || _la==NAME) {
				{
				State = 297;
				table_identifier();
				}
			}

			State = 300;
			Match(INTRA_TABLE_REFERENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOK_PREFIX() { return GetToken(FormulaParser.BOOK_PREFIX, 0); }
		public Table_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_identifier; } }
	}

	[RuleVersion(0)]
	public Table_identifierContext table_identifier() {
		Table_identifierContext _localctx = new Table_identifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_table_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BOOK_PREFIX) {
				{
				State = 302;
				Match(BOOK_PREFIX);
				}
			}

			State = 305;
			table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FormulaParser.NAME, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 62, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF_FUNCTION_LIST() { return GetToken(FormulaParser.REF_FUNCTION_LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Ref_function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_function_call; } }
	}

	[RuleVersion(0)]
	public Ref_function_callContext ref_function_call() {
		Ref_function_callContext _localctx = new Ref_function_callContext(Context, State);
		EnterRule(_localctx, 64, RULE_ref_function_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(REF_FUNCTION_LIST);
			State = 310;
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CELL_FUNCTION_LIST() { return GetToken(FormulaParser.CELL_FUNCTION_LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_DEFINED_FUNCTION_NAME() { return GetToken(FormulaParser.USER_DEFINED_FUNCTION_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_SHEET_PREFIX() { return GetToken(FormulaParser.SINGLE_SHEET_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOK_PREFIX() { return GetToken(FormulaParser.BOOK_PREFIX, 0); }
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 66, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CELL_FUNCTION_LIST:
				{
				State = 312;
				Match(CELL_FUNCTION_LIST);
				}
				break;
			case BOOK_PREFIX:
			case SINGLE_SHEET_PREFIX:
			case USER_DEFINED_FUNCTION_NAME:
				{
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BOOK_PREFIX || _la==SINGLE_SHEET_PREFIX) {
					{
					State = 313;
					_la = TokenStream.LA(1);
					if ( !(_la==BOOK_PREFIX || _la==SINGLE_SHEET_PREFIX) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 316;
				Match(USER_DEFINED_FUNCTION_NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 319;
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,38,322,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,0,1,1,1,1,
		1,1,5,1,75,8,1,10,1,12,1,78,9,1,1,2,1,2,1,2,5,2,83,8,2,10,2,12,2,86,9,
		2,1,3,1,3,1,3,5,3,91,8,3,10,3,12,3,94,9,3,1,4,1,4,1,4,5,4,99,8,4,10,4,
		12,4,102,9,4,1,5,1,5,1,5,5,5,107,8,5,10,5,12,5,110,9,5,1,6,1,6,5,6,114,
		8,6,10,6,12,6,117,9,6,1,7,1,7,1,7,3,7,122,8,7,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,3,8,131,8,8,1,9,1,9,1,9,5,9,136,8,9,10,9,12,9,139,9,9,1,10,1,10,1,
		10,3,10,144,8,10,1,11,1,11,1,11,5,11,149,8,11,10,11,12,11,152,9,11,1,12,
		1,12,1,12,5,12,157,8,12,10,12,12,12,160,9,12,1,13,1,13,3,13,164,8,13,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,175,8,14,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,3,15,185,8,15,1,16,1,16,1,16,5,16,190,8,16,10,
		16,12,16,193,9,16,1,17,1,17,3,17,197,8,17,1,17,1,17,1,17,3,17,202,8,17,
		5,17,204,8,17,10,17,12,17,207,9,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,3,18,219,8,18,1,19,3,19,222,8,19,1,19,1,19,3,19,226,8,19,
		5,19,228,8,19,10,19,12,19,231,9,19,1,19,1,19,1,20,1,20,1,20,5,20,238,8,
		20,10,20,12,20,241,9,20,1,21,1,21,1,21,5,21,246,8,21,10,21,12,21,249,9,
		21,1,22,1,22,1,22,5,22,254,8,22,10,22,12,22,257,9,22,1,23,1,23,1,23,5,
		23,262,8,23,10,23,12,23,265,9,23,1,24,1,24,1,24,5,24,270,8,24,10,24,12,
		24,273,9,24,1,25,1,25,3,25,277,8,25,1,26,1,26,1,26,3,26,282,8,26,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,3,27,291,8,27,1,28,1,28,1,28,3,28,296,8,
		28,1,29,3,29,299,8,29,1,29,1,29,1,30,3,30,304,8,30,1,30,1,30,1,31,1,31,
		1,32,1,32,1,32,1,33,1,33,3,33,315,8,33,1,33,3,33,318,8,33,1,33,1,33,1,
		33,0,0,34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,0,5,1,0,12,17,1,0,9,10,1,0,7,8,2,0,
		1,1,33,33,2,0,29,29,32,32,337,0,68,1,0,0,0,2,71,1,0,0,0,4,79,1,0,0,0,6,
		87,1,0,0,0,8,95,1,0,0,0,10,103,1,0,0,0,12,111,1,0,0,0,14,121,1,0,0,0,16,
		130,1,0,0,0,18,132,1,0,0,0,20,143,1,0,0,0,22,145,1,0,0,0,24,153,1,0,0,
		0,26,161,1,0,0,0,28,174,1,0,0,0,30,184,1,0,0,0,32,186,1,0,0,0,34,196,1,
		0,0,0,36,218,1,0,0,0,38,221,1,0,0,0,40,234,1,0,0,0,42,242,1,0,0,0,44,250,
		1,0,0,0,46,258,1,0,0,0,48,266,1,0,0,0,50,274,1,0,0,0,52,281,1,0,0,0,54,
		290,1,0,0,0,56,295,1,0,0,0,58,298,1,0,0,0,60,303,1,0,0,0,62,307,1,0,0,
		0,64,309,1,0,0,0,66,317,1,0,0,0,68,69,3,2,1,0,69,70,5,0,0,1,70,1,1,0,0,
		0,71,76,3,4,2,0,72,73,7,0,0,0,73,75,3,4,2,0,74,72,1,0,0,0,75,78,1,0,0,
		0,76,74,1,0,0,0,76,77,1,0,0,0,77,3,1,0,0,0,78,76,1,0,0,0,79,84,3,6,3,0,
		80,81,5,11,0,0,81,83,3,6,3,0,82,80,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,
		84,85,1,0,0,0,85,5,1,0,0,0,86,84,1,0,0,0,87,92,3,8,4,0,88,89,7,1,0,0,89,
		91,3,8,4,0,90,88,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,
		7,1,0,0,0,94,92,1,0,0,0,95,100,3,10,5,0,96,97,7,2,0,0,97,99,3,10,5,0,98,
		96,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,9,1,0,0,0,
		102,100,1,0,0,0,103,108,3,12,6,0,104,105,5,6,0,0,105,107,3,12,6,0,106,
		104,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,11,1,0,
		0,0,110,108,1,0,0,0,111,115,3,14,7,0,112,114,5,18,0,0,113,112,1,0,0,0,
		114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,13,1,0,0,0,117,115,
		1,0,0,0,118,119,7,1,0,0,119,122,3,14,7,0,120,122,3,16,8,0,121,118,1,0,
		0,0,121,120,1,0,0,0,122,15,1,0,0,0,123,131,3,30,15,0,124,125,5,21,0,0,
		125,126,3,2,1,0,126,127,5,22,0,0,127,131,1,0,0,0,128,131,3,66,33,0,129,
		131,3,18,9,0,130,123,1,0,0,0,130,124,1,0,0,0,130,128,1,0,0,0,130,129,1,
		0,0,0,131,17,1,0,0,0,132,137,3,20,10,0,133,134,5,25,0,0,134,136,3,20,10,
		0,135,133,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,
		19,1,0,0,0,139,137,1,0,0,0,140,141,5,27,0,0,141,144,3,20,10,0,142,144,
		3,22,11,0,143,140,1,0,0,0,143,142,1,0,0,0,144,21,1,0,0,0,145,150,3,24,
		12,0,146,147,5,26,0,0,147,149,3,24,12,0,148,146,1,0,0,0,149,152,1,0,0,
		0,150,148,1,0,0,0,150,151,1,0,0,0,151,23,1,0,0,0,152,150,1,0,0,0,153,158,
		3,26,13,0,154,155,5,20,0,0,155,157,3,26,13,0,156,154,1,0,0,0,157,160,1,
		0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,25,1,0,0,0,160,158,1,0,0,0,161,
		163,3,28,14,0,162,164,5,28,0,0,163,162,1,0,0,0,163,164,1,0,0,0,164,27,
		1,0,0,0,165,175,5,1,0,0,166,167,5,21,0,0,167,168,3,18,9,0,168,169,5,22,
		0,0,169,175,1,0,0,0,170,175,3,36,18,0,171,175,3,64,32,0,172,175,3,56,28,
		0,173,175,3,58,29,0,174,165,1,0,0,0,174,166,1,0,0,0,174,170,1,0,0,0,174,
		171,1,0,0,0,174,172,1,0,0,0,174,173,1,0,0,0,175,29,1,0,0,0,176,185,5,2,
		0,0,177,185,5,3,0,0,178,185,5,4,0,0,179,185,5,5,0,0,180,181,5,23,0,0,181,
		182,3,32,16,0,182,183,5,24,0,0,183,185,1,0,0,0,184,176,1,0,0,0,184,177,
		1,0,0,0,184,178,1,0,0,0,184,179,1,0,0,0,184,180,1,0,0,0,185,31,1,0,0,0,
		186,191,3,34,17,0,187,188,5,19,0,0,188,190,3,34,17,0,189,187,1,0,0,0,190,
		193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,33,1,0,0,0,193,191,1,0,
		0,0,194,197,3,30,15,0,195,197,5,1,0,0,196,194,1,0,0,0,196,195,1,0,0,0,
		197,205,1,0,0,0,198,201,5,25,0,0,199,202,3,30,15,0,200,202,5,1,0,0,201,
		199,1,0,0,0,201,200,1,0,0,0,202,204,1,0,0,0,203,198,1,0,0,0,204,207,1,
		0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,35,1,0,0,0,207,205,1,0,0,0,208,
		219,5,33,0,0,209,219,5,30,0,0,210,211,5,31,0,0,211,219,5,33,0,0,212,213,
		5,32,0,0,213,219,7,3,0,0,214,215,5,37,0,0,215,216,5,20,0,0,216,217,5,32,
		0,0,217,219,5,33,0,0,218,208,1,0,0,0,218,209,1,0,0,0,218,210,1,0,0,0,218,
		212,1,0,0,0,218,214,1,0,0,0,219,37,1,0,0,0,220,222,3,40,20,0,221,220,1,
		0,0,0,221,222,1,0,0,0,222,229,1,0,0,0,223,225,5,25,0,0,224,226,3,40,20,
		0,225,224,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,223,1,0,0,0,228,
		231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,
		0,0,0,232,233,5,22,0,0,233,39,1,0,0,0,234,239,3,42,21,0,235,236,7,0,0,
		0,236,238,3,42,21,0,237,235,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,
		240,1,0,0,0,240,41,1,0,0,0,241,239,1,0,0,0,242,247,3,44,22,0,243,244,5,
		11,0,0,244,246,3,44,22,0,245,243,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,
		0,247,248,1,0,0,0,248,43,1,0,0,0,249,247,1,0,0,0,250,255,3,46,23,0,251,
		252,7,1,0,0,252,254,3,46,23,0,253,251,1,0,0,0,254,257,1,0,0,0,255,253,
		1,0,0,0,255,256,1,0,0,0,256,45,1,0,0,0,257,255,1,0,0,0,258,263,3,48,24,
		0,259,260,7,2,0,0,260,262,3,48,24,0,261,259,1,0,0,0,262,265,1,0,0,0,263,
		261,1,0,0,0,263,264,1,0,0,0,264,47,1,0,0,0,265,263,1,0,0,0,266,271,3,50,
		25,0,267,268,5,6,0,0,268,270,3,50,25,0,269,267,1,0,0,0,270,273,1,0,0,0,
		271,269,1,0,0,0,271,272,1,0,0,0,272,49,1,0,0,0,273,271,1,0,0,0,274,276,
		3,52,26,0,275,277,5,18,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,51,1,0,
		0,0,278,279,7,1,0,0,279,282,3,52,26,0,280,282,3,54,27,0,281,278,1,0,0,
		0,281,280,1,0,0,0,282,53,1,0,0,0,283,291,3,30,15,0,284,285,5,21,0,0,285,
		286,3,2,1,0,286,287,5,22,0,0,287,291,1,0,0,0,288,291,3,66,33,0,289,291,
		3,20,10,0,290,283,1,0,0,0,290,284,1,0,0,0,290,288,1,0,0,0,290,289,1,0,
		0,0,291,55,1,0,0,0,292,296,5,37,0,0,293,294,7,4,0,0,294,296,5,37,0,0,295,
		292,1,0,0,0,295,293,1,0,0,0,296,57,1,0,0,0,297,299,3,60,30,0,298,297,1,
		0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,301,5,38,0,0,301,59,1,0,0,0,
		302,304,5,29,0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,306,
		3,62,31,0,306,61,1,0,0,0,307,308,5,37,0,0,308,63,1,0,0,0,309,310,5,34,
		0,0,310,311,3,38,19,0,311,65,1,0,0,0,312,318,5,35,0,0,313,315,7,4,0,0,
		314,313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,318,5,36,0,0,317,312,
		1,0,0,0,317,314,1,0,0,0,318,319,1,0,0,0,319,320,3,38,19,0,320,67,1,0,0,
		0,36,76,84,92,100,108,115,121,130,137,143,150,158,163,174,184,191,196,
		201,205,218,221,225,229,239,247,255,263,271,276,281,290,295,298,303,314,
		317
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
